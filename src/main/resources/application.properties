server.port=80

spring.datasource.username=user02
spring.datasource.password=user02
spring.datasource.url=jdbc:mysql://localhost:3306/user02
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

## Hibernate

#테이블 생성
spring.jpa.hibernate.ddl-auto=update
## create : 기존 테이블을 삭제 후  다시 생성
## create-drop : create 하고 같으나 어플리케이션 종료 시점에 table drop
## update : 변경된 부분만 적용
## validate : 엔티티(VO)와 테이블이 정상적으로 매핑되었는지 검증
## none : 사용하지 않을 때 none 
## 개발시에는 편의를 위해서 create, create drop, 
## 실제 운영시에는 update, validate or none 을 사용

####### VO 클래스의 멤버 변수명이 자동으로 DB에 컬럼명과 연결이 될 때
## regDate 의 형태면 설정이 필요 (낙타표기법)
## reg_date 설정 필요 X(뱀 표기법)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

### JPA에 의해서 자동으로 생성되고 실행되는 SQL문을 실시간으로 출력하는 설정
logging.level.org.hibernate.SQLQuery=debug
### ?에 매핑되는 파라미터 값을 출력
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

##하이버네이트가 실행한 sql 출력
spring.jpa.show-sql=true
##하이버네이트가 실행한 sql을 보기 쉽게 정렬하는 것
spring.jpa.properties.hibernate.format_sql=true

##트랜잭션 처리
spring.aop.proxy-target-class=true

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
 
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=100MB

spring.messages.basename=message/message
spring.messages.encoding=UTF-8
spring.messages.use-code-as-default-message=true

member.filePath = upload/member
board.notice.filePath = upload/board/notice
board.qna.filePath = upload/board/qna
